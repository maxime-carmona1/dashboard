import {
  lit_exports
} from "./chunk-V7ATHVVB.js";
import {
  __decorateClass
} from "./chunk-LXFZE6M5.js";

// node_modules/@vaadin-component-factory/vcf-nav/src/vcf-nav.ts
import { customElement, property } from "lit/decorators.js";
import "@vaadin/vaadin-lumo-styles/color.js";
import "@vaadin/vaadin-lumo-styles/typography.js";
import "@vaadin/vaadin-lumo-styles/sizing.js";
import "@vaadin/vaadin-lumo-styles/spacing.js";
import "@vaadin/vaadin-lumo-styles/style.js";
import "@vaadin/vaadin-lumo-styles/font-icons.js";
var id = 0;
var Nav = class extends lit_exports.LitElement {
  constructor() {
    super(...arguments);
    this.collapsible = false;
    this.collapsed = false;
  }
  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "navigation");
  }
  render() {
    const label = this.querySelector('[slot="label"]');
    if (label && this.collapsible) {
      return lit_exports.html`
        <details ?open="${!this.collapsed}" @toggle="${this.toggleCollapsed}">${this.renderBody(label)}</details>
      `;
    }
    return this.renderBody(label);
  }
  renderBody(label) {
    if (label) {
      if (!label.id)
        label.id = "app-nav-label-" + id++;
      this.setAttribute("aria-labelledby", label.id);
    } else {
      this.removeAttribute("aria-labelledby");
    }
    return lit_exports.html`
      <summary part="label" ?hidden="${label == null}">
        <slot name="label" @slotchange="${() => this.requestUpdate()}"></slot>
      </summary>
      <slot role="list"></slot>
    `;
  }
  toggleCollapsed(e) {
    this.collapsed = !e.target.open;
  }
};
Nav.styles = lit_exports.css`
    :host {
      display: block;
      font-family: var(--lumo-font-family);
      font-size: var(--lumo-font-size-m);
      font-weight: 500;
      line-height: var(--lumo-line-height-xs);
      color: var(--lumo-body-text-color);
      -webkit-tap-highlight-color: transparent;
    }

    [hidden] {
      display: none !important;
    }

    summary {
      cursor: var(--lumo-clickable-cursor, default);
      display: flex;
      align-items: center;
      justify-content: space-between;
      border-radius: var(--lumo-border-radius-m);
    }

    summary ::slotted([slot='label']) {
      display: block;
      font-size: var(--lumo-font-size-s);
      color: var(--lumo-secondary-text-color);
      margin: var(--lumo-space-s);
      border-radius: inherit;
    }

    summary::-webkit-details-marker {
      display: none;
    }

    summary::marker {
      content: '';
    }

    summary::after {
      font-family: lumo-icons;
      color: var(--lumo-tertiary-text-color);
      font-size: var(--lumo-icon-size-m);
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: var(--lumo-size-s);
      height: var(--lumo-size-s);
      transition: transform 140ms;
      margin: 0 var(--lumo-space-xs);
    }

    :host([collapsible]) summary::after {
      content: var(--lumo-icons-dropdown);
    }

    @media (any-hover: hover) {
      summary:hover::after {
        color: var(--lumo-body-text-color);
      }
    }

    :host([collapsed]) summary::after {
      transform: rotate(-90deg);
    }

    @supports selector(:focus-visible) {
      summary {
        outline: none;
      }

      summary:focus-visible {
        box-shadow: 0 0 0 2px var(--lumo-primary-color-50pct);
      }
    }

    slot {
      /* Needed to make role="list" work */
      display: block;
    }
  `;
__decorateClass([
  property({ type: Boolean, reflect: true })
], Nav.prototype, "collapsible", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], Nav.prototype, "collapsed", 2);
Nav = __decorateClass([
  customElement("vcf-nav")
], Nav);

// node_modules/@vaadin-component-factory/vcf-nav/src/vcf-nav-item.ts
import { customElement as customElement2, property as property2, query } from "lit/decorators.js";
import "@vaadin/vaadin-lumo-styles/color.js";
import "@vaadin/vaadin-lumo-styles/typography.js";
import "@vaadin/vaadin-lumo-styles/sizing.js";
import "@vaadin/vaadin-lumo-styles/spacing.js";
import "@vaadin/vaadin-lumo-styles/style.js";
import "@vaadin/vaadin-lumo-styles/font-icons.js";
var NavItem = class extends lit_exports.LitElement {
  constructor() {
    super(...arguments);
    this.path = "";
    this.expanded = false;
    this.active = false;
  }
  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "listitem");
    this._updateActive();
    this.__boundUpdateActive = this._updateActive.bind(this);
    window.addEventListener("popstate", this.__boundUpdateActive);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    window.removeEventListener("popstate", this.__boundUpdateActive);
  }
  render() {
    return lit_exports.html`
      <a href="${this.path}" part="item" aria-current="${this.active ? "page" : false}">
        <slot name="prefix"></slot>
        <slot></slot>
        <slot name="suffix"></slot>
        <button
          part="toggle-button"
          @click="${this.toggleExpanded}"
          ?hidden="${!this.querySelector("[slot=children]")}"
          aria-controls="children"
          aria-expanded="${this.expanded}"
          aria-label="Toggle child items"></button>
      </a>
      <slot name="children" role="list" part="children" id="children" ?hidden="${!this.expanded}"></slot>
    `;
  }
  toggleExpanded(e) {
    e.preventDefault();
    e.stopPropagation();
    this.expanded = !this.expanded;
  }
  _updateActive() {
    const hasBaseUri = document.baseURI != document.location.href;
    const pathAbsolute = this.path.startsWith("/");
    if (hasBaseUri && !pathAbsolute) {
      const pathRelativeToRoot = document.location.pathname;
      const basePath = new URL(document.baseURI).pathname;
      const pathWithoutBase = pathRelativeToRoot.substring(basePath.length);
      const pathRelativeToBase = basePath !== pathRelativeToRoot && pathRelativeToRoot.startsWith(basePath) ? pathWithoutBase : pathRelativeToRoot;
      this.active = pathRelativeToBase === this.path;
    } else {
      this.active = document.location.pathname == this.path;
    }
    this.toggleAttribute("child-active", document.location.pathname.startsWith(this.path));
    if (this.active) {
      this.expanded = true;
    }
  }
};
NavItem.styles = lit_exports.css`
    :host {
      display: block;
    }

    [hidden] {
      display: none !important;
    }

    a {
      flex: auto;
      min-width: 0;
      display: flex;
      align-items: center;
      gap: var(--lumo-space-xs);
      text-decoration: none;
      color: inherit;
      font: inherit;
      padding: var(--lumo-space-s);
      padding-inline-start: calc(var(--lumo-space-s) + var(--_child-indent, 0px));
      transition: color 140ms;
      border-radius: var(--lumo-border-radius-m);
      transition: background-color 140ms, color 140ms;
      cursor: var(--lumo-clickable-cursor, default);
      min-height: var(--lumo-icon-size-m);
    }

    button {
      -webkit-appearance: none;
      appearance: none;
      border: 0;
      margin: calc((var(--lumo-icon-size-m) - var(--lumo-size-s)) / 2) 0;
      margin-inline-end: calc(var(--lumo-space-xs) * -1);
      padding: 0;
      background: transparent;
      font: inherit;
      color: var(--lumo-tertiary-text-color);
      flex: none;
      width: var(--lumo-size-s);
      height: var(--lumo-size-s);
      cursor: var(--lumo-clickable-cursor, default);
      transition: color 140ms;
    }

    :host(:not([path])) a {
      position: relative;
    }

    :host(:not([path])) button::after {
      content: "";
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
    }

    @media (any-hover: hover) {
      a:hover {
        color: var(--lumo-header-text-color);
      }

      button:hover {
        color: var(--lumo-body-text-color);
      }
    }

    a:active:focus {
      background-color: var(--lumo-contrast-5pct);
    }

    button::before {
      font-family: lumo-icons;
      content: var(--lumo-icons-dropdown);
      font-size: 1.5em;
      line-height: var(--lumo-size-s);
      display: inline-block;
      transform: rotate(-90deg);
      transition: transform 140ms;
    }

    :host([expanded]) button::before {
      transform: none;
    }

    @supports selector(:focus-visible) {
      a,
      button {
        outline: none;
      }

      a:focus-visible,
      button:focus-visible {
        border-radius: var(--lumo-border-radius-m);
        box-shadow: 0 0 0 2px var(--lumo-primary-color-50pct);
      }
    }

    a:active {
      color: var(--lumo-header-text-color);
    }

    slot[name='prefix'],
    slot[name='suffix'] {
      flex: none;
    }

    slot:not([name]) {
      display: block;
      flex: auto;
      min-width: 0;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      margin: 0 var(--lumo-space-xs);
    }

    slot[name='prefix']::slotted(:is(vaadin-icon, [class*='icon'])) {
      color: var(--lumo-contrast-60pct);
      font-size: var(--lumo-icon-size-s);
      min-width: 1em;
      min-height: 1em;
    }

    :host([active]) slot[name='prefix']::slotted(:is(vaadin-icon, [class*='icon'])) {
      color: inherit;
    }

    slot[name='children'] {
      --_child-indent: calc(var(--_child-indent-2, 0px) + var(--vcf-nav-child-indent, var(--lumo-space-l)));
    }

    slot[name='children']::slotted(*) {
      --_child-indent-2: var(--_child-indent);
    }

    slot[name='children'] {
      /* Needed to make role="list" work */
      display: block;
      width: 100%;
    }

    :host([active]) a {
      color: var(--lumo-primary-text-color);
      background-color: var(--lumo-primary-color-10pct);
    }
  `;
__decorateClass([
  property2()
], NavItem.prototype, "path", 2);
__decorateClass([
  property2({ type: Boolean, reflect: true })
], NavItem.prototype, "expanded", 2);
__decorateClass([
  property2({ type: Boolean, reflect: true })
], NavItem.prototype, "active", 2);
__decorateClass([
  query("button")
], NavItem.prototype, "button", 2);
__decorateClass([
  query("#children")
], NavItem.prototype, "childrenSlot", 2);
NavItem = __decorateClass([
  customElement2("vcf-nav-item")
], NavItem);
//# sourceMappingURL=@vaadin-component-factory_vcf-nav.js.map
